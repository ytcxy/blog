<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数值</title>
      <link href="/2020/04/21/200421%E5%A4%A7%E6%95%B0%E5%80%BC/"/>
      <url>/2020/04/21/200421%E5%A4%A7%E6%95%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>两个有用的类： </p><ul><li>BigInteger      整数运算</li><li>BigDecimal    浮点运算</li></ul><p>使用静态的valueOf方法可以将普通的数值转换为大数值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a &#x3D; BigInteger.valueOf(100);</span><br></pre></td></tr></table></figure><a id="more"></a><p>不能使用人们熟悉的算术运算符（如：+和*）处理大数值。而需要使用大数值类中的add和multiply方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger c &#x3D; a.add(b); &#x2F;&#x2F; c &#x3D; a + b</span><br><span class="line">BigInteger d &#x3D; c.multiply(b.add(BigInteger.valueOf(2))); &#x2F;&#x2F; d &#x3D; c * (b + 2)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lotteryOdds = lotteryOdds.multiply(BigInteger.valueOf(n-i+ <span class="number">1</span>)).divide(BigInteger.valueOf(i));</span><br></pre></td></tr></table></figure><ul><li>BigInteger add（BigInteger other）</li><li>BigInteger subtract（BigInteger other）</li><li>BigInteger multiply（BigInteger other）</li><li>BigInteger divide（BigInteger other）</li><li>BigInteger mod（BigInteger other）</li></ul><p>上面就是 加减乘除模</p><ul><li>int compareTo（BigInteger other）</li></ul><p>如果这个大整数与另一个大整数other相等，返回0；如果这个大整数小于另一个大整数other，返回负数；否则，返回正数。</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入输出</title>
      <link href="/2020/04/21/200421%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
      <url>/2020/04/21/200421%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p>首先需要构造一个Scanner对象，并与“标准输入流”System.in关联。</p><p><code>Scanner in = new Scanner(System.in)</code></p><p>nextLine方法将输入一行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = in.nextLine();  <span class="comment">//读入一行</span></span><br><span class="line">String t = in.next(); <span class="comment">//读入 String， 遇到空格分隔</span></span><br><span class="line"><span class="keyword">int</span> x = in.nextInt();  <span class="comment">// 读入int</span></span><br><span class="line"><span class="keyword">double</span> d = in.nextDouble(); <span class="comment">// 读入 double</span></span><br></pre></td></tr></table></figure><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><a id="more"></a><p>可以使用静态的String.format方法创建一个格式化的字符串，而不打印输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String message = String.format(<span class="string">"Hello, %s, Next"</span>, <span class="string">"sdfg"</span>);</span><br></pre></td></tr></table></figure><p>printf 可以格式化输出： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"Hello, %s Next"</span>, <span class="string">"sdfg"</span>);</span><br></pre></td></tr></table></figure><h3 id="文件输入与输出："><a href="#文件输入与输出：" class="headerlink" title="文件输入与输出："></a>文件输入与输出：</h3><p>要想对文件进行读取，就需要一个用File对象构造一个Scanner对象，如下所示：</p><p>待补： </p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2020/04/21/200421%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2020/04/21/200421%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4><p>String类的substring方法可以从一个较大的字符串提取出一个子串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Hello"</span>;</span><br><span class="line">String t = s.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>取出来的就是 <code>Hel</code> ， 所以括号里的值， 就是取的区间。 </p><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p>Java 语言用 <code>+</code> 号拼接</p><a id="more"></a><p>如果需要把多个字符串放在一起，用一个定界符分隔，可以使用静态join方法：</p><p><code>String t = String.join(&quot;,&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;);</code></p><p>结果就是： S,M,L,XL</p><h4 id="不可变字符串"><a href="#不可变字符串" class="headerlink" title="不可变字符串"></a>不可变字符串</h4><p>String 类没有提供用于修改字符串的方法。</p><p>所以只能先提取处理，然后再拼接。</p><p>就是不能直接 <code>s[0] = &quot;b&quot;</code> 这样直接修改。 </p><p>但是可以直接重新赋值。 </p><h4 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h4><p><code>s.equals(t)</code> 检查 s 和 t 是不是一样的。 </p><p>把变量替换成 真正的字符串也是一样的。 </p><p><code>equalsIgnoreCase()</code> 不区分大小写。 </p><p>一定不要使用==运算符检测两个字符串是否相等！这个运算符只能够确定两个字符串是否放置在同一个位置上。当然，如果字符串放置在同一个位置上，它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</p><h4 id="空串与-Null-串"><a href="#空串与-Null-串" class="headerlink" title="空串与 Null 串"></a>空串与 Null 串</h4><p>空串是 “” 是长度为 0 的串。 </p><p>空串是一个 Java对象， 有自己的长度（0）， 和内容 （空）。 </p><p>String 变量还可以存放一个长特殊的值， <code>null</code> 这表示目前没有任何对象与该变量关联</p><p>要检查一个字符串是否为null，要使用以下条件：</p><p><code>if (s == null)</code></p><p>时要检查一个字符串既不是null也不为空串，这种情况下就需要使用以下条件：</p><p><code>if (s != null &amp;&amp; s.length() !=0 )</code></p><h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><p>有些时候，需要由较短的字符串构建字符串，例如，按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串，都会构建一个新的String对象，既耗时，又浪费空间。使用StringBuilder类就可以避免这个问题的发生。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">      builder.append(<span class="string">"st"</span>);</span><br><span class="line">      String s = builder.toString();</span><br><span class="line"></span><br><span class="line">      builder.append(<span class="string">"er"</span>);</span><br><span class="line">      String t = builder.toString();</span><br><span class="line"></span><br><span class="line">System.out.println(s);</span><br><span class="line">      System.out.println(t);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言元素</title>
      <link href="/2020/04/12/200412%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/"/>
      <url>/2020/04/12/200412%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code> : 转换成整数</li><li><code>float</code> : 转换成浮点数</li><li><code>str()</code> : 转换成字符串</li><li><code>chr()</code> : 一个数字字符， 转换成字符。</li><li><code>ord()</code> 一个字符，转换整数。 </li></ul><a id="more"></a><p>运算符号： </p><ul><li>/  除法</li><li>// 整除</li><li>% 模</li><li>** 乘方</li></ul><h4 id="运算符："><a href="#运算符：" class="headerlink" title="运算符："></a>运算符：</h4><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>[]</code> <code>[:]</code></td><td style="text-align:left">下标，切片</td></tr><tr><td style="text-align:left"><code>**</code></td><td style="text-align:left">指数</td></tr><tr><td style="text-align:left"><code>~</code> <code>+</code> <code>-</code></td><td style="text-align:left">按位取反, 正负号</td></tr><tr><td style="text-align:left"><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td style="text-align:left">乘，除，模，整除</td></tr><tr><td style="text-align:left"><code>+</code> <code>-</code></td><td style="text-align:left">加，减</td></tr><tr><td style="text-align:left"><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td style="text-align:left">右移，左移</td></tr><tr><td style="text-align:left"><code>&amp;</code></td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left"><code>^</code> `</td><td style="text-align:left">`</td><td>按位异或，按位或</td></tr><tr><td style="text-align:left"><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td style="text-align:left">小于等于，小于，大于，大于等于</td></tr><tr><td style="text-align:left"><code>==</code> <code>!=</code></td><td style="text-align:left">等于，不等于</td></tr><tr><td style="text-align:left"><code>is</code>  <code>is not</code></td><td style="text-align:left">身份运算符</td></tr><tr><td style="text-align:left"><code>in</code> <code>not in</code></td><td style="text-align:left">成员运算符</td></tr><tr><td style="text-align:left"><code>not</code> <code>or</code> <code>and</code></td><td style="text-align:left">逻辑运算符</td></tr></tbody></table></div><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b</span><br><span class="line">a *= a + <span class="number">2</span>  <span class="comment"># 相当于： a = a * (a + 2)</span></span><br></pre></td></tr></table></figure><p><code>print(&quot;%.1f&quot; % (c)) #: 保留一位小数输出</code></p>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检索模型与搜索排序</title>
      <link href="/2020/04/08/200408%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
      <url>/2020/04/08/200408%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h4 id="词频因子：-tf"><a href="#词频因子：-tf" class="headerlink" title="词频因子： tf"></a>词频因子： <code>tf</code></h4><p>即一个单词在文档中出现的次数；反复出现的单词，往往能表征文档的主题信息。 </p><p>一种词频因子的变体计算公式是： </p><script type="math/tex; mode=display">W_{tf} = 1 + log(tf)</script><p>公式中的 1 是为了起到平滑的作用。 </p><p>另一种单词词频因子的标题计算公式是： </p><a id="more"></a><p>$W_{tf} = a + (1 - a) * \frac{tf}{max(tf)}$</p><p>其中 a 是调节因子， 新的研究表明 a 的取值为0.4效果更好。 </p><p><code>tf</code> 代表这个单词的实际词频数目，  而 <code>max(tf)</code> 代表文档中所有的单词中出现次数最多的那个单词对应的词频数目。 </p><h4 id="逆文档频率因子：-idf"><a href="#逆文档频率因子：-idf" class="headerlink" title="逆文档频率因子： idf"></a>逆文档频率因子： <code>idf</code></h4><p>给定一个文档集合，那么每个单词的 <code>idf</code> 就确定了。 </p><p>计算公式如下： </p><p>$idf_k = log(\frac{N}{n_k})$</p><p>$N$ 代表文档集合中一共又多少个文档。 </p><p>$n_k$ 代表特征单词在多少个文档中出现过。 </p><p><code>idf</code> 的值越高， 则其区分不同文档的能力就越强。 反之，能力就越弱。 </p><h4 id="tf-idf-框架"><a href="#tf-idf-框架" class="headerlink" title="tf * idf 框架"></a><code>tf * idf</code> 框架</h4><script type="math/tex; mode=display">Weight_{word} = tf * idf</script><p>对于文档D 来说， </p><p>如果 D 中的某个单词的词频很高，而且这个单词在文档集合的其他文档中很少出现，那么这个单词的权值就会很高。 </p><p>如果 D 中的某个单词的词频很高，而且这个单词在文档集合的其他文档中也经常出现，那么这个单词的权值就一般。 </p><h3 id="检索质量评价标准"><a href="#检索质量评价标准" class="headerlink" title="检索质量评价标准"></a>检索质量评价标准</h3><h4 id="精确率与召回率"><a href="#精确率与召回率" class="headerlink" title="精确率与召回率"></a>精确率与召回率</h4><p><img src="https://s1.ax1x.com/2020/04/09/GhXvHU.png" alt="相关图片"></p><p>N ： 代表查询相关且搜索到</p><p>M： 代表查询不相关且搜索到</p><p>K ： 代表查询相关但没搜索到</p><p>L ： 代表查询不相关但没有搜索到； </p><script type="math/tex; mode=display">精确率 = \frac{N}{N+M}</script><script type="math/tex; mode=display">召回率 = \frac{N}{N + K}</script><h3 id="MAP"><a href="#MAP" class="headerlink" title="MAP"></a>MAP</h3><p><code>MAP</code>  是衡量多个查询的平均检索质量的</p><p><code>AP</code> 是衡量单个查询的检索质量的</p><p>AP 的计算公式： 相关文档的理想排名位置除以实际排名位置， 然后相加。 </p>]]></content>
      
      
      <categories>
          
          <category> 搜索引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索引擎 </tag>
            
            <tag> 日常总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github搜索</title>
      <link href="/2020/04/08/200408github%E6%90%9C%E7%B4%A2/"/>
      <url>/2020/04/08/200408github%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 按照项目名&#x2F;仓库名搜索（大小写不敏感）</span><br><span class="line">in:name xxx </span><br><span class="line"># 按照README搜索（大小写不敏感）</span><br><span class="line">in:readme xxx</span><br><span class="line"># 按照description搜索（大小写不敏感）</span><br><span class="line">in:description xxx</span><br><span class="line"># stars数大于xxx</span><br><span class="line">stars:&gt;xxx</span><br><span class="line"># forks数大于xxx</span><br><span class="line">forks:&gt;xxx</span><br><span class="line"># 编程语言为xxx</span><br><span class="line">language:xxx</span><br><span class="line"># 最新更新时间晚于YYYY-MM-DD</span><br><span class="line">pushed:&gt;YYYY-MM-DD</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> github学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> git指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 指令学习</title>
      <link href="/2020/04/07/git-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/04/07/git-%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="常用的几条命令"><a href="#常用的几条命令" class="headerlink" title="常用的几条命令"></a>常用的几条命令</h4><p><code>git remote add origin {https://github.com/}</code> {就是仓库地址}</p><p>我们init之后， 要把本地和仓库对应起来。 这样才能知道本地对应什么仓库。 </p><ul><li><code>git init</code></li><li><code>git add 1.txt</code></li><li><code>git commit -m &quot;xxxxx&quot;</code></li><li><code>git push origin master</code>   master 当前分支。 </li></ul><a id="more"></a><p><code>git status</code> 查看本地文件的状态； </p><p><code>git add .</code> 代表当前文件夹下的文件都添加到缓冲区。 </p><p><code>git reset [opt] 版本号</code></p><p><code>--hard 回滚归档区，缓冲区，工作区</code></p><p><code>--soft 回滚归档区</code></p><p><code>--mixed 回滚归档区，缓冲区</code></p><p><code>git log</code></p><p><code>git reflog</code>   查看之前的操作。 </p><p><code>git revert 版本号</code>  抠掉一次操作。 </p><p><code>git branch -v</code> 查看当前有哪些分支，并处于哪个分支。 </p><p><code>git checkout -b b1</code>  创建了b1 这个分支，并处于b1这个分支。 </p><p>-b 是创建的意思，如果是切换分支， 那就不用写 -b。 </p><p>假设当前分支是 <code>master</code></p><p><code>git merge b1</code> 把b1这个分支合并到当前分支。 也就是 master这个分支。 </p><p><code>git pull</code> 拉取远程仓库最新的版本。</p>]]></content>
      
      
      <categories>
          
          <category> github学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字与静态</title>
      <link href="/2020/04/07/%E6%95%B0%E5%AD%97%E4%B8%8E%E9%9D%99%E6%80%81/"/>
      <url>/2020/04/07/%E6%95%B0%E5%AD%97%E4%B8%8E%E9%9D%99%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h4 id="常数变量的名称应该要都是大写字母"><a href="#常数变量的名称应该要都是大写字母" class="headerlink" title="常数变量的名称应该要都是大写字母"></a>常数变量的名称应该要都是大写字母</h4><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>final 的变量代表不能改变它的值</li><li>final 的method 代表你不能覆盖掉该method</li><li>final 的类代表你不能继承该类。</li></ul><h3 id="日期表示"><a href="#日期表示" class="headerlink" title="日期表示"></a>日期表示</h3><p><code>import java.util.Date</code></p><ul><li><p>完整的日期与时间 <code>%tc</code></p><p><code>String.format(&quot;%tc&quot;, new Date())</code></p><p><code>Sun Nov 28 14:52:41 MST 2004</code></p></li><li><p>只有时间：<code>%tr</code></p><p><code>String.format(&quot;%tr&quot;, new Date())</code></p><p><code>03:01:47 PM</code></p><a id="more"></a></li><li><p>周，月，日： <code>%tA %tB %td</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date today = <span class="keyword">new</span> Date();</span><br><span class="line">String.format(<span class="string">"%tA, %tB, %td"</span>, today, today, today);</span><br></pre></td></tr></table></figure><p><code>Sunday, November 28</code></p><p>不用多写参数的写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date today &#x3D; new Date();</span><br><span class="line">String.format(&quot;%tA, %&lt;tB, %&lt;td&quot;, today);</span><br><span class="line">&#x2F;&#x2F; &lt; 代表重复之前的参数。</span><br></pre></td></tr></table></figure></li></ul><h3 id="操作日期"><a href="#操作日期" class="headerlink" title="操作日期"></a>操作日期</h3><p>取得当前的日期，我们就可以用 Date， </p><p>那就用 <code>java.util.Calendar</code> 来操作日期。</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承与多态</title>
      <link href="/2020/04/07/java%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%A4%9A%E6%80%81/"/>
      <url>/2020/04/07/java%E5%AD%A6%E4%B9%A0-%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="四种存取是权限"><a href="#四种存取是权限" class="headerlink" title="四种存取是权限"></a>四种存取是权限</h3><ul><li>private</li><li>default</li><li>protected</li><li>public</li></ul><p>public 类型的成员会被继承。</p><p>private 类型的成员不会被继承。</p><p>子类要是想继承父类， 要用到 extends。 </p><a id="more"></a><h3 id="继承的意义："><a href="#继承的意义：" class="headerlink" title="继承的意义："></a>继承的意义：</h3><ul><li>避免了重复程序代码</li><li>定义出共同的协议</li></ul><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>代表只能被赋值一次。 </p><h3 id="Java的接口就好像是100-的纯抽象类。"><a href="#Java的接口就好像是100-的纯抽象类。" class="headerlink" title="Java的接口就好像是100%的纯抽象类。"></a>Java的接口就好像是100%的纯抽象类。</h3><h3 id="extend-只能有一个，-但是implement可以有好多个。"><a href="#extend-只能有一个，-但是implement可以有好多个。" class="headerlink" title="extend 只能有一个， 但是implement可以有好多个。"></a>extend 只能有一个， 但是implement可以有好多个。</h3><p>extend 代表继承， implement 代表接口。 </p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo github （3）配置的坑点</title>
      <link href="/2020/04/05/hexo-github/"/>
      <url>/2020/04/05/hexo-github/</url>
      
        <content type="html"><![CDATA[<h3 id="一：-新建分类页面和标签页面的时候"><a href="#一：-新建分类页面和标签页面的时候" class="headerlink" title="一： 新建分类页面和标签页面的时候"></a>一： 新建分类页面和标签页面的时候</h3><p>可以的源代码是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>或者这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然而我写成这样</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>为什么我会写成这样呢， 因为在 typora中打开的时候， 最上面和最下面的 —- 被自动渲染了， 所以就没有看到，当我打开源码的时候才开到， emmm，每次部署上去都出错， 搞得我心态都崩了。 emmm</p><h3 id="二：-侧边栏的图标不能显示，或者显示之后网页就不能进去了；"><a href="#二：-侧边栏的图标不能显示，或者显示之后网页就不能进去了；" class="headerlink" title="二： 侧边栏的图标不能显示，或者显示之后网页就不能进去了；"></a>二： 侧边栏的图标不能显示，或者显示之后网页就不能进去了；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home:  &#x2F; || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br></pre></td></tr></table></figure><p>我写成上面那样是不行的， 或者我把后面的图标去掉，网页可以进，但没有图标。 </p><p>如果图标写在下面，也不可以。</p><p>机缘巧合我写成了这样： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home:  &#x2F;|| home</span><br><span class="line">  about: &#x2F;about&#x2F;|| user</span><br><span class="line">  tags: &#x2F;tags&#x2F;|| tags</span><br><span class="line">  categories: &#x2F;categories&#x2F;|| th</span><br><span class="line">  archives: &#x2F;archives&#x2F;|| archive</span><br></pre></td></tr></table></figure><p>就是||前面没有空格， 他就可以了。 </p><h3 id="还要坑，-但是我忘了。emmm"><a href="#还要坑，-但是我忘了。emmm" class="headerlink" title="还要坑， 但是我忘了。emmm"></a>还要坑， 但是我忘了。emmm</h3>]]></content>
      
      
      <categories>
          
          <category> hexo+github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo github (2)</title>
      <link href="/2020/04/05/hexo-github-2/"/>
      <url>/2020/04/05/hexo-github-2/</url>
      
        <content type="html"><![CDATA[<h3 id="首先注册一个-github-账号。"><a href="#首先注册一个-github-账号。" class="headerlink" title="首先注册一个 github 账号。"></a>首先注册一个 <code>github</code> 账号。</h3><p>新建一个仓库， 命名为 <code>{name}.github.io</code></p><p>name 为你的github的用户名， 所以每个用户名只能用一次</p><p>然后打开 hexo 的根目录， 找到站点配置文件，</p><a id="more"></a><p>找到最后的地方：</p><p><img src="https://s1.ax1x.com/2020/04/05/GBwPsS.png" alt=""></p><p>修改之后保存； </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>之后就可以在用github的网站访问了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo+github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo github（1）</title>
      <link href="/2020/04/04/hexo-github%EF%BC%881%EF%BC%89/"/>
      <url>/2020/04/04/hexo-github%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="Windos-10-系统"><a href="#Windos-10-系统" class="headerlink" title="Windos 10 系统"></a>Windos 10 系统</h3><h3 id="按照-Node-js"><a href="#按照-Node-js" class="headerlink" title="按照 Node.js"></a>按照 Node.js</h3><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">官方地址</a></p><p><img src="https://img-blog.csdnimg.cn/2020040416165886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpZHN1bW1lcg==,size_16,color_FFFFFF,t_70" alt="选择左边的就好"></p><h3 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h3><a id="more"></a><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官方网站</a><br>根据自己的电脑系统<br>下载下来一路安装就好。 </p><ul><li>安装git之后， 就可以换用 git bash 了，  在文件夹里面鼠标右键，找到 git bash 就可以了。 </li><li>以下所有的命令都会在 git bash 中完成 。 </li></ul><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>新建一个文件夹，命名 blog， 就是自己的博客放在这个 blog 文件夹里面。</p><p>查看node 和 npm 有没有安装成功<br><img src="https://img-blog.csdnimg.cn/20200404162751449.png" alt="查看node 和 npm 有没有安装成功"><br>先来安装个cnpm提高速度，以后下载什么东西都用cnpm<br>输入命令：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>安装之后安装 hexo<br><code>cnpm install -g hexo-cli</code><br> 验证是否安装成功：<br> <code>hexo -v</code></p><h3 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h3><p>查看当前目录的位置 <code>pwd</code><br><img src="https://img-blog.csdnimg.cn/20200404165300217.png" alt="这是我的文件路径"><br>然后最主要的命令来了， 初始话 hexo，<br> <code>hexo init</code></p><p> hexo 的一些命令：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> hexo clean #用来清理缓存文件</span><br><span class="line">hexo g      #生成文件</span><br><span class="line">hexo  s     #运行本地服务器</span><br><span class="line">hexo  d   #上传到服务器</span><br></pre></td></tr></table></figure></p><h3 id="运行："><a href="#运行：" class="headerlink" title="运行："></a>运行：</h3><p> <code>hexo  s</code><br><img src="https://img-blog.csdnimg.cn/20200404170908973.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2tpZHN1bW1lcg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图所示， 我们可以用 <code>localhost:4000</code> 来访问我们的博客， 这个只是本地的。只有运行 hexo s 才可以访问。 </p><p>本地博客就搭建完成了。 之后就可以部署到 github 中了。 </p>]]></content>
      
      
      <categories>
          
          <category> hexo+github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/04/hello-world/"/>
      <url>/2020/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
